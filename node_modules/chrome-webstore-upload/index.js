// API documentation:
// https://developer.chrome.com/docs/webstore/api
// https://developer.chrome.com/docs/webstore/using-api
const rootURI = 'https://www.googleapis.com';
export const refreshTokenURI = 'https://www.googleapis.com/oauth2/v4/token';
const uploadExistingURI = (id) => `${rootURI}/upload/chromewebstore/v1.1/items/${id}`;
const publishURI = ({ extensionId, target = 'default', deployPercentage }) => {
    const url = new URL(`${rootURI}/chromewebstore/v1.1/items/${extensionId}/publish`);
    url.searchParams.set('publishTarget', target);
    if (deployPercentage !== undefined) {
        url.searchParams.set('deployPercentage', String(deployPercentage));
    }
    return url.href;
};
const getURI = (id, projection) => `${rootURI}/chromewebstore/v1.1/items/${id}?projection=${projection}`;
const requiredFields = ['extensionId', 'clientId', 'refreshToken'];
function throwIfNotOk(request, response) {
    if (!request.ok) {
        const error = new Error(request.statusText ?? 'Unknown error');
        error.response = response;
        throw error;
    }
}
class APIClient {
    extensionId;
    clientId;
    refreshToken;
    clientSecret;
    constructor(options) {
        if (typeof fetch !== 'function') {
            throw new TypeError('`chrome-webstore-upload` requires Node.js 18.17 or newer because it relies on the global `fetch` function.');
        }
        if (typeof options !== 'object') {
            throw new TypeError('The options object is required');
        }
        for (const field of requiredFields) {
            if (!options[field]) {
                throw new Error(`Option "${field}" is required`);
            }
        }
        this.extensionId = options.extensionId;
        this.clientId = options.clientId;
        this.refreshToken = options.refreshToken;
        this.clientSecret = options.clientSecret;
    }
    async uploadExisting(readStream, token = this.fetchToken()) {
        if (!readStream) {
            throw new Error('Read stream missing');
        }
        const { extensionId } = this;
        const request = await fetch(uploadExistingURI(extensionId), {
            method: 'PUT',
            headers: this._headers(await token),
            // @ts-expect-error Node extension? ü§∑‚Äç‚ôÇÔ∏è Required https://github.com/nodejs/node/issues/46221
            duplex: 'half',
            // Until they figure it out, this seems to work. Alternatively use https://stackoverflow.com/a/76780381/288906
            body: readStream,
        });
        const response = await request.json();
        throwIfNotOk(request, response);
        return response;
    }
    async publish(target = 'default', token = this.fetchToken(), deployPercentage = undefined) {
        const { extensionId } = this;
        const request = await fetch(publishURI({ extensionId, target, deployPercentage }), {
            method: 'POST',
            headers: this._headers(await token),
        });
        const response = await request.json();
        throwIfNotOk(request, response);
        return response;
    }
    async get(projection = 'DRAFT', token = this.fetchToken()) {
        const { extensionId } = this;
        const request = await fetch(getURI(extensionId, projection), {
            method: 'GET',
            headers: this._headers(await token),
        });
        const response = await request.json();
        throwIfNotOk(request, response);
        return response;
    }
    async fetchToken() {
        const { clientId, clientSecret, refreshToken } = this;
        const json = {
            client_id: clientId,
            refresh_token: refreshToken,
            grant_type: 'refresh_token',
            client_secret: clientSecret,
        };
        if (!clientSecret) {
            delete json.client_secret;
        }
        const request = await fetch(refreshTokenURI, {
            method: 'POST',
            body: JSON.stringify(json),
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const response = await request.json();
        throwIfNotOk(request, response);
        return response.access_token;
    }
    _headers(token) {
        return {
            Authorization: `Bearer ${token}`,
            'x-goog-api-version': '2',
        };
    }
}
export default function chromeWebstoreUpload(options) {
    return new APIClient(options);
}
